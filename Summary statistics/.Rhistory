describe(attributes$num_redemptions_2yr)
glimpse(attributes$num_redemptions_2yr)
describe(attributes$num_redemptions_2yr)
class(attributes$num_redemptions_2yr)
attributes_clean <- attributes %>%
mutate(num_redemptions_2yr = as.numeric(ifelse(num_redemptions_2yr=='?',NA,num_redemptions_2yr)))
# eval=FALSE because we don't want to execute this when running this kniting this file
p_load(shiny)
p_load(miniUI) # miniUI is the inside RStudio user interface designed for data scientists and not end-users
histo_range <- function(attributes, attribute_name) {
attribute <- attributes %>%
.[[attribute_name]]  # this is the canonical method for selecting a vector from a data frame using dplyr
# first we set up the two slider inputs and plot the historgram
ui <- miniPage(
gadgetTitleBar("Histograms and Quantile Ranges"),
miniContentPanel(
sliderInput("quant_range", "Quantile Range", 0, 1, value = c(0,1), step = 0.01),
sliderInput("bins", "Bins", 1, 100, value = 30, step = 1),
plotOutput("histo")
)
)
# then we set up the data for rendering the histogram
server <- function(input, output, session) {
# We need to feed the values for the low and high quantile values into our filter
# Define reactive expressions, outputs, etc.
quant_low <- reactive({(quantile(attribute, input$quant_range[[1]]))})
quant_high <- reactive({(quantile(attribute, input$quant_range[[2]]))})
output$histo <- renderPlot(attributes %>%
filter_(paste(attribute_name, ">=", quant_low()),
paste(attribute_name, "<=", quant_high())) %>%
ggplot(aes_string(attribute_name)) +  # note the aes_string when using a variable
geom_histogram(bins = input$bins))
# When the Done button is clicked, return a value
observeEvent(input$done, {
returnValue <- 0
stopApp(list(low = quantile(attribute, input$quant_range[[1]]),
high = quantile(attribute, input$quant_range[[2]]),
bins = input$bins))
})
}
runGadget(ui, server)
}
bin_values <- histo_range(attributes, "num_redemptions_2yr")
# eval=FALSE because we don't want to execute this when running this kniting this file
p_load(shiny)
p_load(miniUI) # miniUI is the inside RStudio user interface designed for data scientists and not end-users
histo_range <- function(attributes, attribute_name) {
attribute <- attributes %>%
.[[attribute_name]]  # this is the canonical method for selecting a vector from a data frame using dplyr
# first we set up the two slider inputs and plot the historgram
ui <- miniPage(
gadgetTitleBar("Histograms and Quantile Ranges"),
miniContentPanel(
sliderInput("quant_range", "Quantile Range", 0, 1, value = c(0,1), step = 0.01),
sliderInput("bins", "Bins", 1, 100, value = 30, step = 1),
plotOutput("histo")
)
)
# then we set up the data for rendering the histogram
server <- function(input, output, session) {
# We need to feed the values for the low and high quantile values into our filter
# Define reactive expressions, outputs, etc.
quant_low <- reactive({(quantile(attribute, input$quant_range[[1]]))})
quant_high <- reactive({(quantile(attribute, input$quant_range[[2]]))})
output$histo <- renderPlot(attributes %>%
filter_(paste(attribute_name, ">=", quant_low()),
paste(attribute_name, "<=", quant_high())) %>%
ggplot(aes_string(attribute_name)) +  # note the aes_string when using a variable
geom_histogram(bins = input$bins))
# When the Done button is clicked, return a value
observeEvent(input$done, {
returnValue <- 0
stopApp(list(low = quantile(attribute, input$quant_range[[1]]),
high = quantile(attribute, input$quant_range[[2]]),
bins = input$bins))
})
}
runGadget(ui, server)
}
bin_values <- histo_range(attributes_clean, "num_redemptions_2yr")
attributes_clean <- attributes %>%
mutate(num_redemptions_2yr = as.numeric(ifelse(num_redemptions_2yr=='?',NA,num_redemptions_2yr)))
describe(attributes_clean$num_redemptions_2yr)
library(pacman)  # You must install pacman if not already installed
# after that the other libraries will install if needed
p_load(ggplot2)
p_load(dplyr)
p_load(Hmisc)
p_load(magrittr)
p_load(tidyr)
p_load(scales)
p_load(htmlwidgets)
p_load(formattable)
p_load(plotly)
movie_folder_id = 11728267305
# The following function is created so that all of the later movie definitions
# have a link which an RStudio user may command-click on to view
movie <- function(filename_string) {
filename = stringr::str_match(filename_string, "\\((.*?)\\)")[[2]]
cat(paste0('<video src="', filename, '" width="480" height="360" controls="controls">
your browser does not support the video tag
</video>'))
return(invisible())
}
# if you are running this content within RStudio
# then you need to run the following code once to download the movies
# Note that until you download the movies you may get a PANDOC error 67
# if you haven't used the eboxr package yet go look for this package in
# the data science repo and follow its instructions
if(!file.exists('movies')) {
dir.create("movies")
# if the process failed for some reason you can just run the following to completion
p_load(eboxr)
boxr::box_fetch(movie_folder_id, "movies")
}
attributes <- attributes %>%
mutate(num_redemptions_2yr = as.numeric(ifelse(num_redemptions_2yr=='?',NA,num_redemptions_2yr)))
describe(attributes_clean$num_redemptions_2yr)
# eval=FALSE because we don't want to execute this when running this kniting this file
p_load(shiny)
p_load(miniUI) # miniUI is the inside RStudio user interface designed for data scientists and not end-users
histo_range <- function(attributes, attribute_name) {
attribute <- attributes %>%
.[[attribute_name]]  # this is the canonical method for selecting a vector from a data frame using dplyr
# first we set up the two slider inputs and plot the historgram
ui <- miniPage(
gadgetTitleBar("Histograms and Quantile Ranges"),
miniContentPanel(
sliderInput("quant_range", "Quantile Range", 0, 1, value = c(0,1), step = 0.01),
sliderInput("bins", "Bins", 1, 100, value = 30, step = 1),
plotOutput("histo")
)
)
# then we set up the data for rendering the histogram
server <- function(input, output, session) {
# We need to feed the values for the low and high quantile values into our filter
# Define reactive expressions, outputs, etc.
quant_low <- reactive({(quantile(attribute, input$quant_range[[1]]))})
quant_high <- reactive({(quantile(attribute, input$quant_range[[2]]))})
output$histo <- renderPlot(attributes %>%
filter_(paste(attribute_name, ">=", quant_low()),
paste(attribute_name, "<=", quant_high())) %>%
ggplot(aes_string(attribute_name)) +  # note the aes_string when using a variable
geom_histogram(bins = input$bins))
# When the Done button is clicked, return a value
observeEvent(input$done, {
returnValue <- 0
stopApp(list(low = quantile(attribute, input$quant_range[[1]]),
high = quantile(attribute, input$quant_range[[2]]),
bins = input$bins))
})
}
runGadget(ui, server)
}
bin_values <- histo_range(attributes, "num_redemptions_2yr")
attributes %>%
ggplot(aes(flight_rev_3yr)) +
geom_histogram()
attributes %<>%
mutate(num_redemptions_2yr = as.numeric(ifelse(num_redemptions_2yr == '?', NA,
num_redemptions_2yr)),
biz_flight_propensity_3yr = as.numeric(ifelse(num_redemptions_2yr == '?', NA,
num_redemptions_2yr)))
summary(attributes$num_redemptions_2yr)
summary(attributes$flight_rev_3yr)
# eval=FALSE because we don't want to execute this when running this kniting this file
p_load(shiny)
p_load(miniUI) # miniUI is the inside RStudio user interface designed for data scientists and not end-users
histo_range <- function(attributes, attribute_name) {
attribute <- attributes %>%
.[[attribute_name]]  # this is the canonical method for selecting a vector from a data frame using dplyr
# first we set up the two slider inputs and plot the historgram
ui <- miniPage(
gadgetTitleBar("Histograms and Quantile Ranges"),
miniContentPanel(
sliderInput("quant_range", "Quantile Range", 0, 1, value = c(0,1), step = 0.01),
sliderInput("bins", "Bins", 1, 100, value = 30, step = 1),
plotOutput("histo")
)
)
# then we set up the data for rendering the histogram
server <- function(input, output, session) {
# We need to feed the values for the low and high quantile values into our filter
# Define reactive expressions, outputs, etc.
quant_low <- reactive({(quantile(attribute, input$quant_range[[1]]), na.rm = TRUE)})
# eval=FALSE because we don't want to execute this when running this kniting this file
p_load(shiny)
p_load(miniUI) # miniUI is the inside RStudio user interface designed for data scientists and not end-users
histo_range <- function(attributes, attribute_name) {
attribute <- attributes %>%
.[[attribute_name]]  # this is the canonical method for selecting a vector from a data frame using dplyr
# first we set up the two slider inputs and plot the historgram
ui <- miniPage(
gadgetTitleBar("Histograms and Quantile Ranges"),
miniContentPanel(
sliderInput("quant_range", "Quantile Range", 0, 1, value = c(0,1), step = 0.01),
sliderInput("bins", "Bins", 1, 100, value = 30, step = 1),
plotOutput("histo")
)
)
# then we set up the data for rendering the histogram
server <- function(input, output, session) {
# We need to feed the values for the low and high quantile values into our filter
# Define reactive expressions, outputs, etc.
quant_low <- reactive({(quantile(attribute, input$quant_range[[1]], na.rm = TRUE))})
quant_high <- reactive({(quantile(attribute, input$quant_range[[2]], na.rm = TRUE))})
output$histo <- renderPlot(attributes %>%
filter_(paste(attribute_name, ">=", quant_low()),
paste(attribute_name, "<=", quant_high())) %>%
ggplot(aes_string(attribute_name)) +  # note the aes_string when using a variable
geom_histogram(bins = input$bins))
# When the Done button is clicked, return a value
observeEvent(input$done, {
returnValue <- 0
stopApp(list(low = quantile(attribute, input$quant_range[[1]]),
high = quantile(attribute, input$quant_range[[2]]),
bins = input$bins))
})
}
runGadget(ui, server)
}
bin_values <- histo_range(attributes_clean, "num_redemptions_2yr")
head(attributes)
attributes_clean <- attributes %>%
mutate(num_redemptions_2yr = as.numeric(ifelse(num_redemptions_2yr=='?',0,num_redemptions_2yr)))
describe(attributes_clean$num_redemptions_2yr)
# eval=FALSE because we don't want to execute this when running this kniting this file
p_load(shiny)
p_load(miniUI) # miniUI is the inside RStudio user interface designed for data scientists and not end-users
histo_range <- function(attributes, attribute_name) {
attribute <- attributes %>%
.[[attribute_name]]  # this is the canonical method for selecting a vector from a data frame using dplyr
# first we set up the two slider inputs and plot the historgram
ui <- miniPage(
gadgetTitleBar("Histograms and Quantile Ranges"),
miniContentPanel(
sliderInput("quant_range", "Quantile Range", 0, 1, value = c(0,1), step = 0.01),
sliderInput("bins", "Bins", 1, 100, value = 30, step = 1),
plotOutput("histo")
)
)
# then we set up the data for rendering the histogram
server <- function(input, output, session) {
# We need to feed the values for the low and high quantile values into our filter
# Define reactive expressions, outputs, etc.
quant_low <- reactive({(quantile(attribute, input$quant_range[[1]]))})
quant_high <- reactive({(quantile(attribute, input$quant_range[[2]]))})
output$histo <- renderPlot(attributes %>%
filter_(paste(attribute_name, ">=", quant_low()),
paste(attribute_name, "<=", quant_high())) %>%
ggplot(aes_string(attribute_name)) +  # note the aes_string when using a variable
geom_histogram(bins = input$bins))
# When the Done button is clicked, return a value
observeEvent(input$done, {
returnValue <- 0
stopApp(list(low = quantile(attribute, input$quant_range[[1]]),
high = quantile(attribute, input$quant_range[[2]]),
bins = input$bins))
})
}
runGadget(ui, server)
}
bin_values <- histo_range(attributes_clean, "num_redemptions_2yr")
summary(attributes_clean$num_redemptions_2yr)
# We will get the data using the eboxr package
pacman::p_load(eboxr)
attributes <- eboxr_read("/Users/curtbergmann/Box Sync/Elicit Education/scholar/summary_statistics/attributes.RDS",
read_fun = readRDS)
options(scipen=9)
attributes_clean <- attributes %>%
mutate(num_redemptions_2yr = as.numeric(ifelse(num_redemptions_2yr=='?',0,num_redemptions_2yr)))
describe(attributes_clean$num_redemptions_2yr)
# eval=FALSE because we don't want to execute this when running this kniting this file
p_load(shiny)
p_load(miniUI) # miniUI is the inside RStudio user interface designed for data scientists and not end-users
histo_range <- function(attributes, attribute_name) {
attribute <- attributes %>%
.[[attribute_name]]  # this is the canonical method for selecting a vector from a data frame using dplyr
# first we set up the two slider inputs and plot the historgram
ui <- miniPage(
gadgetTitleBar("Histograms and Quantile Ranges"),
miniContentPanel(
sliderInput("quant_range", "Quantile Range", 0, 1, value = c(0,1), step = 0.01),
sliderInput("bins", "Bins", 1, 100, value = 30, step = 1),
plotOutput("histo")
)
)
# then we set up the data for rendering the histogram
server <- function(input, output, session) {
# We need to feed the values for the low and high quantile values into our filter
# Define reactive expressions, outputs, etc.
quant_low <- reactive({(quantile(attribute, input$quant_range[[1]]))})
quant_high <- reactive({(quantile(attribute, input$quant_range[[2]]))})
output$histo <- renderPlot(attributes %>%
filter_(paste(attribute_name, ">=", quant_low()),
paste(attribute_name, "<=", quant_high())) %>%
ggplot(aes_string(attribute_name)) +  # note the aes_string when using a variable
geom_histogram(bins = input$bins))
# When the Done button is clicked, return a value
observeEvent(input$done, {
returnValue <- 0
stopApp(list(low = quantile(attribute, input$quant_range[[1]]),
high = quantile(attribute, input$quant_range[[2]]),
bins = input$bins))
})
}
runGadget(ui, server)
}
bin_values <- histo_range(attributes_clean, "num_redemptions_2yr")
ggplot(attributes_clean, aes(num_redemptions_2yr)) +
geom_histogram()
# eval=FALSE because we don't want to execute this when running this kniting this file
p_load(shiny)
p_load(miniUI) # miniUI is the inside RStudio user interface designed for data scientists and not end-users
histo_range <- function(attributes, attribute_name) {
attribute <- attributes %>%
.[[attribute_name]]  # this is the canonical method for selecting a vector from a data frame using dplyr
# first we set up the two slider inputs and plot the historgram
ui <- miniPage(
gadgetTitleBar("Histograms and Quantile Ranges"),
miniContentPanel(
sliderInput("quant_range", "Quantile Range", 0, 1, value = c(0,1), step = 0.01),
sliderInput("bins", "Bins", 1, 100, value = 30, step = 1),
plotOutput("histo")
)
)
# then we set up the data for rendering the histogram
server <- function(input, output, session) {
# We need to feed the values for the low and high quantile values into our filter
# Define reactive expressions, outputs, etc.
quant_low <- reactive({(quantile(attribute, input$quant_range[[1]]))})
quant_high <- reactive({(quantile(attribute, input$quant_range[[2]]))})
output$histo <- renderPlot(attributes %>%
filter_(paste(attribute_name, ">=", quant_low()),
paste(attribute_name, "<=", quant_high())) %>%
ggplot(aes_string(attribute_name)) +  # note the aes_string when using a variable
geom_histogram(bins = input$bins))
# When the Done button is clicked, return a value
observeEvent(input$done, {
returnValue <- 0
stopApp(list(low = quantile(attribute, input$quant_range[[1]]),
high = quantile(attribute, input$quant_range[[2]]),
bins = input$bins))
})
}
runGadget(ui, server)
}
bin_values <- histo_range(attributes_clean, "num_redemptions_2yr")
# now let's save the bin values for when we knit this document
saveRDS(bin_values, "bin_values.RDS")
ggplot(attributes_clean %>% filter(num_redemptions_2yr>0), aes(num_redemptions_2yr)) +
geom_histogram()
attributes_clean %>%
group_by(loyalty_status) %>%
summarise(min = min(num_redemptions_2yr)
, median = median(num_redemptions_2yr)
, mean = mean(num_redemptions_2yr))
attributes_clean %>%
group_by(loyalty_status) %>%
summarise(min = min(num_redemptions_2yr)
, median = median(num_redemptions_2yr)
, mean = mean(num_redemptions_2yr)
, n =n())
attributes_clean %>%
group_by(loyalty_status) %>%
summarise(min = min(num_redemptions_2yr)
, median = median(num_redemptions_2yr)
, mean = mean(num_redemptions_2yr)
, n = n()
, pct = n /sum(n))
attributes_clean %>%
group_by(loyalty_status) %>%
summarise(min = min(num_redemptions_2yr)
, median = median(num_redemptions_2yr)
, mean = mean(num_redemptions_2yr)
, n = n()) %>%
mutate(pct = n / sum(n))
ggplot(attributes_clean, aes(num_redemptions_2yr)) +
geom_histogram()
attributes_tidy <- attributes_clean %>%
gather(attribute, value, -fake_id, -SEGMENT_ASSIGNED, -loyalty_status)
attributes_tidy %>%
filter(attribute == 'num_redemptions_2yr') %>%
ggplot(aes(value)) +
geom_histogram() +
facet_wrap(~loyalty_status)
attributes_tidy %>%
filter(attribute == 'num_redemptions_2yr') %>%
ggplot(aes(value)) %+%
geom_histogram() %+%
facet_wrap(~loyalty_status, scales = "free")
class(attributes_tidy$value)
attributes_tidy <- attributes_clean %>%
selet(fake_id, SEGMENT_ASSIGNED, loyalty_status, num_redemptions_2yr, ) %>%
gather(attribute, value, -fake_id, -SEGMENT_ASSIGNED, -loyalty_status)
attributes_tidy <- attributes_clean %>%
select(fake_id, SEGMENT_ASSIGNED, loyalty_status, num_redemptions_2yr, ) %>%
gather(attribute, value, -fake_id, -SEGMENT_ASSIGNED, -loyalty_status)
attributes_tidy <- attributes_clean %>%
select(fake_id, SEGMENT_ASSIGNED, loyalty_status, num_redemptions_2yr) %>%
gather(attribute, value, -fake_id, -SEGMENT_ASSIGNED, -loyalty_status)
attributes_tidy %>%
ggplot(aes(value)) %+%
geom_histogram() %+%
facet_wrap(~loyalty_status, scales = "free")
attributes_tidy %>%
ggplot(aes(value)) %+%
geom_histogram() %+%
facet_wrap(~SEGMENT_ASSIGNED, scales = "free")
attributes_tidy %>%
ggplot(aes(value)) %+%
geom_histogram() %+%
facet_gird(loyalty_status~SEGMENT_ASSIGNED, scales = "free")
attributes_tidy %>%
ggplot(aes(value)) +
geom_histogram() +
facet_gird(loyalty_status~SEGMENT_ASSIGNED, scales = "free")
attributes_tidy %>%
ggplot(aes(value)) +
geom_histogram() +
facet_grid(loyalty_status~SEGMENT_ASSIGNED, scales = "free")
attributes_tidy %>%
ggplot(aes(value)) +
geom_histogram() +
facet_grid(~SEGMENT_ASSIGNED, scales = "free")
attributes_tidy %>%
ggplot(aes(value)) +
geom_histogram() +
facet_wrap(~SEGMENT_ASSIGNED, scales = "free")
attributes_tidy %>%
ggplot(aes(factor(value))) +
geom_histogram() +
facet_wrap(~SEGMENT_ASSIGNED, scales = "free")
attributes_tidy %>%
ggplot(aes(value)) +
geom_histogram() +
facet_wrap(~SEGMENT_ASSIGNED, scales = "free")
attributes_tidy %>%
filter(loyalty_status != 'non-member') %>%
ggplot(aes(value)) +
geom_histogram() +
facet_wrap(~SEGMENT_ASSIGNED, scales = "free")
attributes_tidy %>%
filter(loyalty_status != 'non-member') %>%
ggplot(aes(value)) +
geom_histogram() +
facet_wrap(~SEGMENT_ASSIGNED)
attributes_tidy %>%
ggplot(aes(value)) +
geom_histogram() +
facet_wrap(~SEGMENT_ASSIGNED, scales = "free")
ggplot(attributes %>%
mutate(flight_rev_3yr_bin = cut2(flight_rev_3yr, g = 10)) %>%
count(flight_rev_3yr_bin),
aes(flight_rev_3yr_bin, n)) +
geom_bar(stat='identity') +
coord_flip()
attributes_tidy %>%
group_by(loyalty_status, SEGMENT_ASSIGNED) %>%
summarise(quantiles = paste(round(quantile(value, c(0.01, 0.05, 0.5, 0.95, 0.99), na.rm=TRUE), 2), collapse=","))
attributes_tidy %>%
group_by(loyalty_status, SEGMENT_ASSIGNED) %>%
summarise(quantiles = paste(round(quantile(value, c(0.01, 0.05, 0.5, 0.95, 0.99), na.rm=TRUE), 2), collapse=",")) %>%
extract(quantiles, c("q01", "q05", "q50", "q95", "q99")
, regex = "(\\d+\\.?\\d*),(\\d+\\.?\\d*),(\\d+\\.?\\d*),(\\d+\\.?\\d*),(\\d+\\.?\\d*)")
attributes_tidy %>%
group_by(SEGMENT_ASSIGNED) %>%
summarise(quantiles = paste(round(quantile(value, c(0.01, 0.05, 0.5, 0.95, 0.99), na.rm=TRUE), 2), collapse=",")) %>%
extract(quantiles, c("q01", "q05", "q50", "q95", "q99")
, regex = "(\\d+\\.?\\d*),(\\d+\\.?\\d*),(\\d+\\.?\\d*),(\\d+\\.?\\d*),(\\d+\\.?\\d*)")
attributes_tidy %>%
group_by(SEGMENT_ASSIGNED) %>%
summarise(quantiles = paste(round(quantile(value, c(0.01, 0.05, 0.5, 0.95, 0.99), na.rm=TRUE), 2), collapse=",")
, n = n()) %>%
extract(quantiles, c("q01", "q05", "q50", "q95", "q99")
, regex = "(\\d+\\.?\\d*),(\\d+\\.?\\d*),(\\d+\\.?\\d*),(\\d+\\.?\\d*),(\\d+\\.?\\d*)")
attributes_tidy %>%
group_by(SEGMENT_ASSIGNED) %>%
summarise(quantiles = paste(round(quantile(value, c(0.01, 0.05, 0.5, 0.95, 0.99), na.rm=TRUE), 2), collapse=",")
, n = n()
, redemptions = sum(value)) %>%
extract(quantiles, c("q01", "q05", "q50", "q95", "q99")
, regex = "(\\d+\\.?\\d*),(\\d+\\.?\\d*),(\\d+\\.?\\d*),(\\d+\\.?\\d*),(\\d+\\.?\\d*)")
attributes_tidy %>%
group_by(SEGMENT_ASSIGNED) %>%
summarise(quantiles = paste(round(quantile(value, c(0.01, 0.05, 0.5, 0.95, 0.99), na.rm=TRUE), 2), collapse=",")
, n = n()
, redemptions = sum(value)) %>%
ungroup() %>%
mutate(pct_redemptions = redemptions / sum(redemptions)) %>%
extract(quantiles, c("q01", "q05", "q50", "q95", "q99")
, regex = "(\\d+\\.?\\d*),(\\d+\\.?\\d*),(\\d+\\.?\\d*),(\\d+\\.?\\d*),(\\d+\\.?\\d*)")
library(pacman)  # You must install pacman if not already installed
# after that the other libraries will install if needed
p_load(ggplot2)
p_load(dplyr)
p_load(Hmisc)
p_load(magrittr)
p_load(tidyr)
p_load(scales)
p_load(htmlwidgets)
p_load(formattable)
p_load(plotly)
# We will get the data using the eboxr package
pacman::p_load(eboxr)
attributes <- eboxr_read("/Users/curtbergmann/Box Sync/Elicit Education/scholar/summary_statistics/attributes.RDS",
read_fun = readRDS)
options(scipen=9)
describe(attributes$num_redemptions_2yr)
attributes_clean <- attributes %>%
mutate(num_redemptions_2yr = as.numeric(ifelse(num_redemptions_2yr=='?',0,num_redemptions_2yr)))
describe(attributes_clean$num_redemptions_2yr)
